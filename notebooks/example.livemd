# Tested Cell

```elixir
Mix.install([{:kino, "~> 0.6.2"}, {:tested_cell, path: "."}])

TestedCell.Control.display_editors()
```

## Installation

Install the `TestedCell` project using [Mix Install](https://hexdocs.pm/mix/1.12.3/Mix.html#install/2). Typically this belongs in the setup section at the top of every livebook. `TestedCell` relies on the `:kino` project.

<!-- livebook:{"force_markdown":true} -->

```elixir
Mix.install([{:kino, "~> 0.6.2"}, {:tested_cell, path: "."}])
```

## Configuration

We can display editors by calling `TestedCell.display_editors/1`. Editors are hidden by default.

```elixir
# Hide Editors
TestedCell.display_editors(false)

# Display Editors
# true by default
TestedCell.display_editors()
TestedCell.display_editors(true)
```

## Usage

Click the **+ Smart** button to see the smart cells available in the livebook and select **Tested Cell**.

This creates a `TestedCell` like the one below. Here you can write [ExUnit](https://hexdocs.pm/ex_unit/1.12/ExUnit.html) style assertions.

You may also write a **Solution** that will appear after a certain number of failed attempts.

<!-- livebook:{"attrs":{"assertions":"assert Math.double(2) == 4\nassert Math.double(4) == 8","code":"defmodule Math do\r\n  def double(int) do\r\n    int + 2\r\n  end\r\nend","solution":"defmodule Math do\n  def double(int) do\n    int * 2\n  end\nend"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "" do
    defmodule Math do
      def double(int) do
        int + 2
      end
    end

    assert Math.double(2) == 4
    assert Math.double(4) == 8
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
defmodule Math do
  def double(int) do
    int + 2
  end
end
```

`TestedCell` does not display the solution if it is empty.

<!-- livebook:{"attrs":{"assertions":"assert author == \"Patrick Rothfuss\"","code":"author =  nil","solution":""},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "" do
    author = nil
    assert author == "Patrick Rothfuss"
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
author = nil
```
